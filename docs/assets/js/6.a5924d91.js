(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{166:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"chapter-2-getting-started-with-functional-programming-in-typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#chapter-2-getting-started-with-functional-programming-in-typescript","aria-hidden":"true"}},[t._v("#")]),t._v(" Chapter 2. Getting started with functional programming in TypeScript")]),t._v(" "),n("p",[t._v("Our ultimate goal is to start thinking about programs more as combinations of pure functions and less as sequences of\ninstructions that each have an effect. In this chapter, we'll learn some of TypeScript's syntax, and how to use\nits features to exercise the basics of typed functional programming techniques: writing loops as recursive functions,\nusing higher-order functions (HOFs), and writing polymorphic HOFs.")]),t._v(" "),n("h2",{attrs:{id:"introducing-typescript-an-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introducing-typescript-an-example","aria-hidden":"true"}},[t._v("#")]),t._v(" Introducing TypeScript: an example")]),t._v(" "),n("div",{staticClass:"language-ts line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/**\n * abs.ts - a simple TypeScript program\n **/")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// A comment!")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("/* A multiline (or block)\n     comment */")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("/**\n * A documentation comment\n **/")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// Exporting something makes it visible to")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// code outside of this module")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("abs")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        "),n("span",{attrs:{class:"token comment"}},[t._v("// abs takes a number and")]),t._v("\n                                                "),n("span",{attrs:{class:"token comment"}},[t._v("// returns a number")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("n"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                                  "),n("span",{attrs:{class:"token comment"}},[t._v("// return the negation of n")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v("                                          "),n("span",{attrs:{class:"token comment"}},[t._v("// if it's less than zero")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// Since this function isn't exported, it's")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// only visible to code in this file")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("formatAbs")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" msg "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"The absolute value of "')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('" is "')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("abs")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" msg"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// This line will be executed when the module")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// is loaded, or when this file is executed")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// directly")]),t._v("\n"),n("span",{attrs:{class:"token builtin"}},[t._v("console")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("formatAbs")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("42")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    "),n("span",{attrs:{class:"token comment"}},[t._v("// writes to standard out")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br")])]),n("p",[t._v("The building blocks of TypeScript programs are modules. For now, it's fine to think of each TypeScript file as though\nit automatically defines a module. The "),n("code",[t._v("export")]),t._v(" keyword does not come into play in this example, but makes the "),n("code",[t._v("abs")]),t._v("\nfunction visible to other modules. In other words, "),n("code",[t._v("abs")]),t._v(" is a public member of this module. Functions, classes,\ninterfaces, types, and raw values can all be members of a module. We'll discuss all these constructs later.")]),t._v(" "),n("p",[t._v("Our module has three functions, which we'll also call methods, declared with the "),n("code",[t._v("function")]),t._v(" keyword. There are other\nways to declare functions, but we'll cover those later.")]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("abs")]),t._v(" function is a pure function that takes a number and returns its absolute value:")]),t._v(" "),n("div",{staticClass:"language-typescript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-typescript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("abs")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("n"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("TypeScript inherits its numeric type from JavaScript. That means it has only one type of number, conveniently called\n"),n("code",[t._v("number")]),t._v(", which represents a floating-point value. Without some extra work, or the help of a library, we cannot\ndistinguish between integers and floating-point values using the type system.")]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("function")]),t._v(" keyword is followed by a name, and then by a parenthesized list of parameters. "),n("code",[t._v("Abs")]),t._v(" takes one argument\nnamed "),n("code",[t._v("n")]),t._v(", of type "),n("code",[t._v("number")]),t._v(", which we denote with "),n("code",[t._v(": number")]),t._v(". Similarly, we declare the type of "),n("code",[t._v("abs'")]),t._v(" return value\nto be a number with the "),n("code",[t._v(": number")]),t._v(" after the parameter list. The body of the function, which contains all its logic, is\nwritten between curly braces: '{' and '}'. We'll sometimes refer to everything before the opening brace as a function\ns "),n("em",[t._v("signature")]),t._v(", and everything inside the braces as its "),n("em",[t._v("definition")]),t._v(". In general, code between braces can also be\nreferred to as a "),n("em",[t._v("block")]),t._v(". The "),n("code",[t._v("return")]),t._v(" keyword immediately returns the value after it to the caller.")]),t._v(" "),n("p",[t._v("In some languages, the if-else construct works a little like a function call, returning either one value or the other,\ndepending on the condition. If that were the case in TypeScript, we could write:")]),t._v(" "),n("div",{staticClass:"language-typescript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-typescript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("n "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" n"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("But in TypeScript, if-else is only a control-flow mechanism and does not itself return a value. Therefore, when using\nif-else, we must rely on side effects to know which branch was followed. We'll be careful to keep these side effects as\nlocalized as possible, so that the overall function remains pure.")]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("formatAbs")]),t._v(" function, also pure, takes a number and returns a string:")]),t._v(" "),n("div",{staticClass:"language-typescript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-typescript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("formatAbs")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" msg "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"The absolute value of "')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('" is "')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("abs")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" msg"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("Notice that we have not declared its return type with a "),n("code",[t._v(": string")]),t._v(" clause. TypeScript has powerful "),n("em",[t._v("type-inferencing")]),t._v("\ncapabilities, meaning that we can often omit explicit type declarations and let the compiler figure things out. But\nit's generally considered good style to include explicit types in the signatures of functions we intend for others to\nuse. Since "),n("code",[t._v("formatAbs")]),t._v(" is not "),n("code",[t._v("export")]),t._v("ed, it is effectively private to our module, so it's OK to leave out the\n"),n("code",[t._v(": string")]),t._v(". "),n("code",[t._v("FormatAbs")]),t._v(" uses the plus ("),n("code",[t._v("+")]),t._v(") operator to concatenate several strings and numbers together into a\nhuman-readable message. Plus is the only example of so-called "),n("em",[t._v("operator overloading")]),t._v(" in JavaScript, and therefore\nTypeScript. When either side of the "),n("code",[t._v("+")]),t._v(" is a string, the other side is also converted into a string.")]),t._v(" "),n("p",[t._v("The first line of "),n("code",[t._v("formatAbs")]),t._v(" assigns the result of the string concatenation to the variable "),n("code",[t._v("msg")]),t._v(", using the keyword\n"),n("code",[t._v("const")]),t._v(". "),n("code",[t._v("Const")]),t._v(" is short for "),n("em",[t._v("constant")]),t._v(', which is programmer-speak for "a variable whose value never changes".\nVariables declared with '),n("code",[t._v("const")]),t._v(" must have a value assigned as soon as they are created, and can never be assigned a new\nvalue.")]),t._v(" "),n("p",[t._v("Finally, the last line of the module calls our other functions and writes the result to the console:")]),t._v(" "),n("div",{staticClass:"language-typescript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-typescript"}},[n("code",[n("span",{attrs:{class:"token builtin"}},[t._v("console")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("formatAbs")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("42")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("If we execute this file directly with a TypeScript interpreter (more on that later), that's when the output would\noccur. In that case, it works kind of like an implicit "),n("code",[t._v("main")]),t._v(" method. But if we use the file as a module by importing\n"),n("code",[t._v("abs")]),t._v(" into another file, the output would happen the first time that file actually refers to "),n("code",[t._v("abs")]),t._v(".")])])}],!1,null,null,null);s.default=e.exports}}]);