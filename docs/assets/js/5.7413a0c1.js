(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{165:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("A function has a side effect if it does anything other than return a value. Examples:")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"https://github.com/calebharris/fp_book_club_ts/tree/master/fpbookclub/intro",target:"_blank",rel:"noopener noreferrer"}},[t._v("the code repository"),s("OutboundLink")],1),t._v(" for expanded,\nrunnable versions of these examples.")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),s("p",[t._v("Some examples of pure functions:")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),s("p",[t._v("Referential transparency allows us to reason about programs using the substitution model, wherein we discover the\nmeaning of program by repeatedly replacing expressions with their results.")])])},[function(){var t=this.$createElement,a=this._self._c||t;return a("h1",{attrs:{id:"chapter-1-what-is-functional-programming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-1-what-is-functional-programming","aria-hidden":"true"}},[this._v("#")]),this._v(" Chapter 1. What is functional programming?")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("We construct our programs using only "),a("em",[this._v("pure functions")]),this._v(" - functions that have no "),a("em",[this._v("side effects")]),this._v(".")])},function(){var t=this.$createElement,a=this._self._c||t;return a("ul",[a("li",[this._v("Modifying any state, such as a variable or data structure, in place")]),this._v(" "),a("li",[this._v("Throwing an exception or exiting the program with an error")]),this._v(" "),a("li",[this._v("Reading or writing a file")]),this._v(" "),a("li",[this._v("Making a network request")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"benefits-of-fp-a-simple-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#benefits-of-fp-a-simple-example","aria-hidden":"true"}},[this._v("#")]),this._v(" Benefits of FP: a simple example")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("We'll walk through refactoring a simple program to remove side effects and demonstrate some TypeScript syntax. We'll\nalso touch on two import concepts in functional programming: "),a("em",[this._v("referential transparency")]),this._v(" and the "),a("em",[this._v("substitution model")]),this._v(".")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"a-program-with-side-effects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-program-with-side-effects","aria-hidden":"true"}},[this._v("#")]),this._v(" A program with side effects")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Cafe")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                               "),s("span",{attrs:{class:"token comment"}},[t._v("//class keyword introduces a class, just")]),t._v("\n                                           "),s("span",{attrs:{class:"token comment"}},[t._v("//  like every other OO language")]),t._v("\n\n  "),s("span",{attrs:{class:"token function"}},[t._v("buyCoffee")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CreditCard"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Coffee "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      "),s("span",{attrs:{class:"token comment"}},[t._v("//method of a class introduced by a name")]),t._v("\n                                           "),s("span",{attrs:{class:"token comment"}},[t._v("//  followed by ()")]),t._v("\n                                           "),s("span",{attrs:{class:"token comment"}},[t._v("//`cc: CreditCard` defines parameter")]),t._v("\n                                           "),s("span",{attrs:{class:"token comment"}},[t._v("//  named `cc` of type `CreditCard`")]),t._v("\n                                           "),s("span",{attrs:{class:"token comment"}},[t._v("//`: Coffee` declares the return type of")]),t._v("\n                                           "),s("span",{attrs:{class:"token comment"}},[t._v("//  the method. compiler will error if the")]),t._v("\n                                           "),s("span",{attrs:{class:"token comment"}},[t._v("//  method can possibly not return a")]),t._v("\n                                           "),s("span",{attrs:{class:"token comment"}},[t._v("//  `Coffee` object")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cup "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Coffee")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("charge")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cup"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                  "),s("span",{attrs:{class:"token comment"}},[t._v("//side effect: actually charges the card")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cup"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("p",[t._v("The line "),s("code",[t._v("cc.charge(cup.price)")]),t._v(" is an example of a side effect. Charging a credit card involves some interaction\nwith the outside world. But the function's return value is just a "),s("code",[t._v("Coffee")]),t._v(", meaning this interaction is not easily\nobservable, making our function difficult to test. We can improve modularity and testability by introducing a\n"),s("code",[t._v("Payments")]),t._v(" object that encapsulates the payment processing logic and removing it from "),s("code",[t._v("CreditCard")]),t._v(".")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"adding-a-payments-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-a-payments-object","aria-hidden":"true"}},[this._v("#")]),this._v(" Adding a Payments object")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Cafe")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token function"}},[t._v("buyCoffee")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CreditCard"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Payments"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Coffee "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cup "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Coffee")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("charge")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cup"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cup"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("The side effect still happens. But we have improved testability because we can pass in a mock "),a("code",[this._v("Payments")]),this._v(" object.\nHowever, any mock will be awkward to use, because it will have to do things like maintain internal state that we can\ninspect after the call to "),a("code",[this._v("charge()")]),this._v(". This is a bit much if all we want is to test that buyCoffee charges the correct\namount for a cup of coffee. It's also going to be tough to reuse buyCoffee. Say we wanted to buy 10 coffees: there is\nno obvious way to do that without contacting the payment processor 10 times!")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"a-functional-solution-removing-the-side-effects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-functional-solution-removing-the-side-effects","aria-hidden":"true"}},[this._v("#")]),this._v(" A functional solution: removing the side effects")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Cafe")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token function"}},[t._v("buyCoffee")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CreditCard"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Coffee"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Charge"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{attrs:{class:"token comment"}},[t._v("//buyCoffee now returns a pair, or")]),t._v("\n                                                 "),s("span",{attrs:{class:"token comment"}},[t._v("//  tuple, of the purchased Coffee")]),t._v("\n                                                 "),s("span",{attrs:{class:"token comment"}},[t._v("//  and its associated Charge")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cup "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Coffee")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" charge "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Charge")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cup"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cup"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" charge"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("p",[t._v("Here, we've removed the side effect. Instead of immediately interacting with the payment processor, "),s("code",[t._v("buyCoffee")]),t._v(" returns\na new "),s("code",[t._v("Charge")]),t._v(" value object along with the "),s("code",[t._v("Coffee")]),t._v(". We can think of this as a description of what we want to happen,\nrather than detailed instructions on how to accomplish it. Actually "),s("em",[t._v("interpreting")]),t._v(" the meaning of "),s("code",[t._v("Charge")]),t._v(" objects is\nnow a concern for elsewhere. In fact, "),s("code",[t._v("Cafe")]),t._v(" no longer has any knowledge of how the process of charging the card works.\nLet's look at "),s("code",[t._v("Charge")]),t._v(" more closely:")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Charge")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                                   "),s("span",{attrs:{class:"token comment"}},[t._v("//once a Charge is created, it's")]),t._v("\n  readonly cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CreditCard"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                       "),s("span",{attrs:{class:"token comment"}},[t._v("//  intended never to change, hence")]),t._v("\n  readonly amount"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("number")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                       "),s("span",{attrs:{class:"token comment"}},[t._v("//  the `readonly` markers")]),t._v("\n\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("constructor")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CreditCard"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" amount"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("number")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cc "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" amount"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{attrs:{class:"token function"}},[t._v("combine")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Charge"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Charge "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cc "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" other"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Charge")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" other"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Error")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"Can\'t combine charges to different cards"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("code",[this._v("Charge")]),this._v(" is an immutable value object, equipped with a "),a("code",[this._v("combine()")]),this._v(" function to merge two charges into one. Now we have\na way to more easily represent the idea of purchasing 10 coffees. We just need to combine the 10 charges into one.")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{attrs:{class:"token function"}},[t._v("buyCoffees")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CreditCard"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("number")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Coffee"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Charge"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cards"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CreditCard"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("fill")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" purchases "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("from")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cards"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cc "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("buyCoffee")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{attrs:{class:"token comment"}},[t._v("//this part is a bit ugly, but we're just splitting the array of [Coffee, Charge]")]),t._v("\n  "),s("span",{attrs:{class:"token comment"}},[t._v("//  tuples into one Coffee array and one Charge array")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("coffees"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" charges"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" purchases"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("reduce")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("coffees"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" charges"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("coffee"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" charge"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    coffees"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("push")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coffee"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    charges"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("push")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("charge"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("coffees"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" charges"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("coffees"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" charges"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("reduce")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" l"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("combine")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("p",[t._v("Our functional solution has significant advantages over the previous two iterations. It's easier to test, since all we\nneed to do is assert that the "),s("code",[t._v("Charge")]),t._v(" objects have the expected values in their "),s("code",[t._v("cc")]),t._v(" and "),s("code",[t._v("amount")]),t._v(" properties. It's\nalso easier to combine simple, low-level behavior into more advanced functionality. Look how straightforward it was to\nimplement batch charging! Finally, we can imagine that the library for communicating with the payment processor is made\nsimpler by this approach. It only needs to issue the correct commands for any given value of "),s("code",[t._v("Charge")]),t._v(".")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),s("p",[t._v("If you've been following along in "),s("em",[t._v("Functional Programming in Scala")]),t._v(", you may have noticed that the Scala code\ncorresponding to these snippets is more compact and elegant. For instance, TypeScript doesn't have the notion of\n"),s("code",[t._v("case")]),t._v(" classes, requiring us to write a little more boilerplate to achieve the same end. It also lacks an "),s("code",[t._v("unzip")]),t._v("\nfor easily separating a sequence of tuples into a tuple of sequences. In general, TypeScript's standard library (which\nis really just JavaScript's) is less comprehensive than Scala's.")]),t._v(" "),s("p",[t._v("On the other hand, TypeScript has better destructuring support (e.g. "),s("code",[t._v("const [coffees, charges] = ...")]),t._v(") and is a\nrelatively thin enhancement to JavaScript, giving it great applicability to web programming. Many people find the\nexperience of developing software with Node.js to be a joy (and, conversely, developing with anything JVM-based to be a\nconstant time-suck).")]),t._v(" "),s("p",[t._v("Later on, we'll have to employ some advanced, potentially difficult-to-understand techniques to get the same expressive\npower from TypeScript's types as we can with Scala's. Still, TypeScript is a powerful, easy-to-deploy, and\nrapidly-evolving language that drastically improves our ability to manage and maintain large JavaScript projects.")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"definition-of-a-pure-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definition-of-a-pure-function","aria-hidden":"true"}},[this._v("#")]),this._v(" Definition of a pure function")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("p",[t._v('The book differentiates between "functions" and "procedures", stating that the phrase "pure function" is redundant. But\ngiven the preponderance of using "function" to mean any semi-cohesive, addressable sequence of code, we\'ll stick with\nexplicitly calling functions "pure" when it matters. Consider a function '),s("code",[t._v("f")]),t._v(", with an input type of "),s("code",[t._v("A")]),t._v(" and an output\ntype of "),s("code",[t._v("B")]),t._v(". In both Scala and TypeScript, the type of "),s("code",[t._v("f")]),t._v(" is written as "),s("code",[t._v("A => B")]),t._v(". Then "),s("code",[t._v("f")]),t._v(" is pure if it relates every\nvalue of "),s("code",[t._v("A")]),t._v(" to exactly one value of "),s("code",[t._v("B")]),t._v(", the output value is determined solely by the input value, and "),s("code",[t._v("f")]),t._v(" takes no\nother actions that change the meaning of the program.")])},function(){var t=this.$createElement,a=this._self._c||t;return a("ul",[a("li",[this._v("Integer addition")]),this._v(" "),a("li",[this._v("Index of substring in string, if the string is immutable")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("The concept of "),a("em",[this._v("referential transparency")]),this._v(", which is a property of "),a("em",[this._v("expressions")]),this._v(", formalizes purity. Any part of a\nprogram that can be evaluated to a result is an expression (meaning that a function is one kind of expression), and it\nis referentially transparent (or RT) if its every occurence in a program can be replaced by its result without altering\nthe meaning of the program. More formally:")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("Referential transparency and purity")]),t._v(" "),s("p",[t._v("An expression "),s("code",[t._v("e")]),t._v(" is "),s("em",[t._v("referentially transparent")]),t._v(" if, for all programs "),s("code",[t._v("p")]),t._v(", all occurrences of "),s("code",[t._v("e")]),t._v(" in "),s("code",[t._v("p")]),t._v(" can be\nreplaced by the result of evaluating "),s("code",[t._v("e")]),t._v(" without changing the meaning of "),s("code",[t._v("p")]),t._v(". A function "),s("code",[t._v("f")]),t._v(" is "),s("em",[t._v("pure")]),t._v(" if the\nexpression "),s("code",[t._v("f(x)")]),t._v(" is referentially trasparent for all referentially transparent "),s("code",[t._v("x")]),t._v(".")])])}],!1,null,null,null);a.default=e.exports}}]);