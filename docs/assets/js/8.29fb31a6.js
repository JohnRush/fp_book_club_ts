(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{165:function(t,s,e){"use strict";e.r(s);var n=e(0),a=Object(n.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),e("p",[t._v("Recall "),e("code",[t._v("List")]),t._v(" operations from "),e("router-link",{attrs:{to:"./chapter_3.html"}},[t._v("Chapter 3")]),t._v(": "),e("code",[t._v("map")]),t._v(", "),e("code",[t._v("filter")]),t._v(", "),e("code",[t._v("foldLeft")]),t._v(", "),e("code",[t._v("foldRight")]),t._v(", "),e("code",[t._v("zipWith")]),t._v(", etc.\nEach one passes over the whole input list and outputs a freshly-created list. For example, each transformation in the\nfollowing code produces a new list, and each of these lists (except the last one) is discarded almost immediately after\nbeing created.")],1),t._v(" "),t._m(1),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),t._m(2),t._v(" "),e("p",[t._v("The nice output comes from the "),e("a",{attrs:{href:"https://nodejs.org/dist/latest-v10.x/docs/api/util.html#util_custom_inspection_functions_on_objects",title:"Util | Node.js Documentaiton",target:"_blank",rel:"noopener noreferrer"}},[t._v("custom inspection function"),e("OutboundLink")],1),t._v(" capability supported by Node. Check out the\n"),e("code",[t._v("List")]),t._v(" source in the online repository for details.")])]),t._v(" "),t._m(3),t._v(" "),t._m(4)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"chapter-5-strictness-and-laziness"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chapter-5-strictness-and-laziness","aria-hidden":"true"}},[this._v("#")]),this._v(" Chapter 5. Strictness and laziness")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-typescript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-typescript"}},[e("code",[e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("List")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token number"}},[t._v("1")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{attrs:{class:"token number"}},[t._v("2")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{attrs:{class:"token number"}},[t._v("3")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{attrs:{class:"token number"}},[t._v("4")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("map")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),e("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("10")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("filter")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),e("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("0")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("map")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),e("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("3")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{attrs:{class:"token function"}},[t._v("List")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token number"}},[t._v("36")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("42")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v('"Whoa, wait a minute," you might be thinking. "Our '),e("code",[t._v("List")]),t._v(" commands did not look like this, and did not produce nice,\nclean console output like this.\" That's true, because we wrote all our "),e("code",[t._v("List")]),t._v(" functions at the top level of the module,\nrather than defining them on a parent class like we did for "),e("code",[t._v("Option")]),t._v(" and "),e("code",[t._v("Either")]),t._v(". We're going to use "),e("code",[t._v("List")]),t._v(" a lot, so\nas an exercise, you might want to go back and update the code to enable the more object-oriented syntax. Hint: You can\ndo this without deleting any of the existing "),e("code",[t._v("List")]),t._v(" functions!")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("We'd like to fuse these operations together into a single pass and avoid creating the intermediate temporary data\nstructures. We could accomplish this by writing a one-off "),s("code",[this._v("while")]),this._v(" loop, but that wouldn't be reusable. It would be\nbetter if we could have this done automatically while retaining the same high-level, composable style we've been\ndeveloping.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("We can achieve this automatic loop fusion through the use of "),s("em",[this._v("non-strictness")]),this._v(", also called "),s("em",[this._v("laziness")]),this._v(". In this chapter,\nwe'll work through the construction of a lazy list type that fuses transformations, and see how non-sttrictness is a\nfundamental technique for writing more efficient and modular functional programs in general.")])}],!1,null,null,null);a.options.__file="chapter_5.md";s.default=a.exports}}]);