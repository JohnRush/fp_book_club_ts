(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{165:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("p",[t._v("Recall "),n("code",[t._v("List")]),t._v(" operations from "),n("router-link",{attrs:{to:"./chapter_3.html"}},[t._v("Chapter 3")]),t._v(": "),n("code",[t._v("map")]),t._v(", "),n("code",[t._v("filter")]),t._v(", "),n("code",[t._v("foldLeft")]),t._v(", "),n("code",[t._v("foldRight")]),t._v(", "),n("code",[t._v("zipWith")]),t._v(", etc.\nEach one passes over the whole input list and outputs a freshly-created list. For example, each transformation in the\nfollowing code produces a new list, and each of these lists (except the last one) is discarded almost immediately after\nbeing created.")],1),t._v(" "),t._m(1),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("The nice output comes from the "),n("a",{attrs:{href:"https://nodejs.org/dist/latest-v10.x/docs/api/util.html#util_custom_inspection_functions_on_objects",title:"Util | Node.js Documentaiton",target:"_blank",rel:"noopener noreferrer"}},[t._v("custom inspection function"),n("OutboundLink")],1),t._v(" capability supported by Node. Check out the\n"),n("code",[t._v("List")]),t._v(" source in the online repository for details.")])]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"chapter-5-strictness-and-laziness"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chapter-5-strictness-and-laziness","aria-hidden":"true"}},[this._v("#")]),this._v(" Chapter 5. Strictness and laziness")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-typescript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-typescript"}},[n("code",[n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("List")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("filter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("List")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("36")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("42")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v('"Whoa, wait a minute," you might be thinking. "Our '),n("code",[t._v("List")]),t._v(" commands did not look like this, and did not produce nice,\nclean console output like this.\" That's true, because we wrote all our "),n("code",[t._v("List")]),t._v(" functions at the top level of the module,\nrather than defining them on a parent class like we did for "),n("code",[t._v("Option")]),t._v(" and "),n("code",[t._v("Either")]),t._v(". We're going to use "),n("code",[t._v("List")]),t._v(" a lot, so\nas an exercise, you might want to go back and update the code to enable the more object-oriented syntax. Hint: You can\ndo this without deleting any of the existing "),n("code",[t._v("List")]),t._v(" functions!")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("We'd like to fuse these operations together into a single pass and avoid creating the intermediate temporary data\nstructures. We could accomplish this by writing a one-off "),s("code",[this._v("while")]),this._v(" loop, but that wouldn't be reusable. It would be\nbetter if we could have this done automatically while retaining the same high-level, composable style we've been\ndeveloping.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("We can achieve this automatic loop fusion through the use of "),s("em",[this._v("non-strictness")]),this._v(", also called "),s("em",[this._v("laziness")]),this._v(". In this chapter,\nwe'll work through the construction of a lazy list type that fuses transformations, and see how non-strictness is a\nfundamental technique for writing more efficient and modular functional programs in general.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"strict-and-non-strict-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strict-and-non-strict-functions","aria-hidden":"true"}},[this._v("#")]),this._v(" Strict and non-strict functions")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("Non-strictness is a property of a function that means the function may choose not to evaluate some or all of its\narguments. Strict functions, as you may guess, always evaluate their arguments. Although you may not have heard about\nfunction strictness, you are probably already familiar with the behavior. In certain cases, we call it\n"),n("em",[t._v("short-circuiting")]),t._v(". Many languages, including TypeScript, have the short-circuiting boolean operators "),n("code",[t._v("&&")]),t._v(" and "),n("code",[t._v("||")]),t._v(". The\noperator "),n("code",[t._v("&&")]),t._v(" only evaluates its second argument if its first is "),n("code",[t._v("true")]),t._v(", while "),n("code",[t._v("||")]),t._v(" only evaluates its second argument\nif its first is "),n("code",[t._v("false")]),t._v(".")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-typescript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-typescript"}},[n("code",[n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("console")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hey!"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// doesn't print anything")]),t._v("\n"),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("console")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hey!"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// doesn't print anything, either")]),t._v("\n"),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("The "),n("code",[t._v("if-else")]),t._v(" construct in TypeScript is also non-strict. The "),n("code",[t._v("else")]),t._v(" block is only evaluated when the condition in the\n"),n("code",[t._v("if")]),t._v(" block is false, and the "),n("code",[t._v("if")]),t._v(" block only when the condition is true.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-typescript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-typescript"}},[n("code",[n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("console")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("console")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Goodbye"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nHello\nundefined\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])}],!1,null,null,null);e.options.__file="chapter_5.md";s.default=e.exports}}]);